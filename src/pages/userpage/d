import { Slider } from 'antd';
import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { FaPlus, FaEdit, FaTrash, FaSearch } from 'react-icons/fa';
import { addProduct, getProduct, editProduct, deleteProduct, getCategories, searchProducts, getSort } from '../../services/admin/login';
import { Pagination } from 'antd';

// Other imports remain the same...

const ProductPage = () => {
  const [products, setProducts] = useState([]);
  const [newProduct, setNewProduct] = useState({ name: '', price: '', edition: '', category: '', quantity: '', image: null });
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isEditing, setIsEditing] = useState(false);
  const [editIndex, setEditIndex] = useState(null);
  const [editProductId, setEditProductId] = useState(null);
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const [productToDelete, setProductToDelete] = useState(null);
  const [categories, setCategories] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [sortOrder, setSortOrder] = useState('');
  const [currentPage, setCurrentPage] = useState(1);
  const [pageSize, setPageSize] = useState(6);
  const [priceRange, setPriceRange] = useState([0, 1000]); // Default price range
  const [filteredProducts, setFilteredProducts] = useState([]); // Products after filtering

  // Pagination
  const handlePageChange = (page, pageSize) => {
    setCurrentPage(page);
    setPageSize(pageSize);
  };

  const currentProducts = filteredProducts.slice((currentPage - 1) * pageSize, currentPage * pageSize);

  const fetchCategories = async () => {
    try {
      const result = await getCategories();
      setCategories(result.categories);
    } catch (error) {
      console.error('Error fetching categories:', error.message);
    }
  };

  useEffect(() => {
    fetchCategories();
  }, []);

  const fetchProducts = async () => {
    try {
      const result = await getProduct();
      setProducts(result.products);
      setFilteredProducts(result.products); // Initialize with all products
    } catch (error) {
      console.error('Error fetching products:', error.message);
    }
  };

  useEffect(() => {
    fetchProducts();
  }, []);

  // Handle price filtering
  const handlePriceChange = (value) => {
    setPriceRange(value);
  };

  useEffect(() => {
    const filtered = products.filter(product => 
      product.price >= priceRange[0] && product.price <= priceRange[1]
    );
    setFilteredProducts(filtered);
  }, [priceRange, products]);

  return (
    <div className="flex flex-col lg:flex-row h-screen bg-gray-100">
      <div className="w-full lg:w-1/4 p-6 bg-white shadow-md rounded-lg">
        <h1 className="text-2xl font-bold mb-4">Product Management</h1>

        {/* Search Bar */}
        <div className="flex space-x-4 mb-4">
          <input
            type="text"
            placeholder="Search by name"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="w-full p-2 border rounded"
          />
          <button
            onClick={handleSearch}
            className="bg-blue-600 text-white px-4 py-2 rounded flex items-center"
          >
            <FaSearch className="mr-2" /> Search
          </button>
        </div>

        {/* Sort Options */}
        <div className="mb-6">
          <label className="block text-gray-700 font-semibold mb-2">Sort By:</label>
          <select
            value={sortOrder}
            onChange={(e) => setSortOrder(e.target.value)}
            className="w-full p-2 border rounded bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            <option value="">Select Sorting</option>
            <option value="priceLowToHigh">Price: Low to High</option>
            <option value="priceHighToLow">Price: High to Low</option>
            <option value="nameAtoZ">Name: A to Z</option>
            <option value="nameZtoA">Name: Z to A</option>
          </select>
        </div>

        {/* Price Filter (Slider) */}
        <div className="mb-6">
          <label className="block text-gray-700 font-semibold mb-2">Filter by Price:</label>
          <Slider
            range
            value={priceRange}
            min={0}
            max={1000}
            onChange={handlePriceChange}
            className="w-full"
          />
          <div className="flex justify-between mt-2">
            <span>${priceRange[0]}</span>
            <span>${priceRange[1]}</span>
          </div>
        </div>

        {/* Add Product Button */}
        <button onClick={openModal} className="bg-blue-600 text-white px-4 py-2 rounded flex items-center mb-6">
          <FaPlus className="mr-2" /> Add Product
        </button>
      </div>

      {/* Right Side for Product Cards */}
      <div className="flex-1 p-8">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 p-8 bg-gray-50">
          {currentProducts.map((product, index) => (
            <div key={product._id} className="bg-white shadow-lg rounded-lg p-4">
              {/* Product Details */}
              <img src={product.image} alt={product.name} className="w-full h-40 object-cover mb-4" />
              <h2 className="text-lg font-bold">{product.name}</h2>
              <p className="text-gray-600">${product.price}</p>
              <p className="text-gray-500">Category: {product.category}</p>
              <p className="text-gray-500">Edition: {product.edition}</p>
              {/* Action Buttons */}
              <div className="flex justify-between mt-4">
                <button onClick={() => handleEditProduct(index, product)} className="bg-yellow-500 text-white px-2 py-1 rounded">
                  <FaEdit />
                </button>
                <button onClick={() => handleOpenDeleteModal(product)} className="bg-red-500 text-white px-2 py-1 rounded">
                  <FaTrash />
                </button>
              </div>
            </div>
          ))}
        </div>

        {/* Pagination */}
        <Pagination
          current={currentPage}
          pageSize={pageSize}
          total={filteredProducts.length}
          onChange={handlePageChange}
          className="mt-8"
        />
      </div>
    </div>
  );
};

export default ProductPage;
